/// <reference types="node" />
import { Request } from 'express';
import { getBadData, getBadRequest, getCode, getConflict, getForbidden, getInternalError, getNotFound, getServiceUnavailable, getUnauthorized } from '@verdaccio/commons-api';
import { StringValue } from '@verdaccio/types';
import { Author, Config, Package, Version } from '@verdaccio/types';
import { AuthorAvatar } from '../types';
export declare function getUserAgent(customUserAgent?: boolean | string): string;
export declare function convertPayloadToBase64(payload: string): Buffer;
/**
 * From normalize-package-data/lib/fixer.js
 * @param {*} name  the package name
 * @return {Boolean} whether is valid or not
 */
export declare function validateName(name: string): boolean;
/**
 * Validate a package.
 * @return {Boolean} whether the package is valid or not
 */
export declare function validatePackage(name: string): boolean;
/**
 * Check whether an element is an Object
 * @param {*} obj the element
 * @return {Boolean}
 */
export declare function isObject(obj: any): boolean;
export declare function isObjectOrArray(obj: any): boolean;
/**
 * Validate the package metadata, add additional properties whether are missing within
 * the metadata properties.
 * @param {*} object
 * @param {*} name
 * @return {Object} the object with additional properties as dist-tags ad versions
 */
export declare function validateMetadata(object: Package, name: string): Package;
export declare function extractTarballFromUrl(url: string): string;
/**
 * Iterate a packages's versions and filter each original tarball url.
 * @param {*} pkg
 * @param {*} req
 * @param {*} config
 * @return {String} a filtered package
 */
export declare function convertDistRemoteToLocalTarballUrls(pkg: Package, req: Request, urlPrefix: string | void): Package;
/**
 * Filter a tarball url.
 * @param {*} uri
 * @return {String} a parsed url
 */
export declare function getLocalRegistryTarballUri(uri: string, pkgName: string, req: Request, urlPrefix: string | void): string;
export declare function tagVersion(data: Package, version: string, tag: StringValue): boolean;
/**
 * Gets version from a package object taking into account semver weirdness.
 * @return {String} return the semantic version of a package
 */
export declare function getVersion(pkg: Package, version: any): Version | void;
/**
 * Parse an internet address
 * Allow:
 - https:localhost:1234        - protocol + host + port
 - localhost:1234              - host + port
 - 1234                        - port
 - http::1234                  - protocol + port
 - https://localhost:443/      - full url + https
 - http://[::1]:443/           - ipv6
 - unix:/tmp/http.sock         - unix sockets
 - https://unix:/tmp/http.sock - unix sockets (https)
 * @param {*} urlAddress the internet address definition
 * @return {Object|Null} literal object that represent the address parsed
 */
export declare function parseAddress(urlAddress: any): any;
/**
 * Function filters out bad semver versions and sorts the array.
 * @return {Array} sorted Array
 */
export declare function semverSort(listVersions: string[]): string[];
/**
 * Flatten arrays of tags.
 * @param {*} data
 */
export declare function normalizeDistTags(pkg: Package): void;
/**
 * Parse an internal string to number
 * @param {*} interval
 * @return {Number}
 */
export declare function parseInterval(interval: any): number;
/**
 * Detect running protocol (http or https)
 */
export declare function getWebProtocol(headerProtocol: string | void, protocol: string): string;
export declare function getLatestVersion(pkgInfo: Package): string;
export declare const ErrorCode: {
    getConflict: typeof getConflict;
    getBadData: typeof getBadData;
    getBadRequest: typeof getBadRequest;
    getInternalError: typeof getInternalError;
    getUnauthorized: typeof getUnauthorized;
    getForbidden: typeof getForbidden;
    getServiceUnavailable: typeof getServiceUnavailable;
    getNotFound: typeof getNotFound;
    getCode: typeof getCode;
};
export declare function parseConfigFile(configPath: string): any;
/**
 * Check whether the path already exist.
 * @param {String} path
 * @return {Boolean}
 */
export declare function folderExists(path: string): boolean;
/**
 * Check whether the file already exist.
 * @param {String} path
 * @return {Boolean}
 */
export declare function fileExists(path: string): boolean;
export declare function sortByName(packages: any[], orderAscending?: boolean | void): string[];
export declare function addScope(scope: string, packageName: string): string;
export declare function deleteProperties(propertiesToDelete: string[], objectItem: any): any;
export declare function addGravatarSupport(pkgInfo: Package, online?: boolean): AuthorAvatar;
/**
 * parse package readme - markdown/ascii
 * @param {String} packageName name of package
 * @param {String} readme package readme

 * @return {String} converted html template
 */
export declare function parseReadme(packageName: string, readme: string): string | void;
export declare function buildToken(type: string, token: string): string;
/**
 * return package version from tarball name
 * @param {String} name
 * @returns {String}
 */
export declare function getVersionFromTarball(name: string): string | void;
export declare type AuthorFormat = Author | string | null | object | void;
/**
 * Formats author field for webui.
 * @see https://docs.npmjs.com/files/package.json#author
 * @param {string|object|undefined} author
 */
export declare function formatAuthor(author: AuthorFormat): any;
/**
 * Check if URI is starting with "http://", "https://" or "//"
 * @param {string} uri
 */
export declare function isHTTPProtocol(uri: string): boolean;
/**
 * Apply whitespaces based on the length
 * @param {*} str the log message
 * @return {String}
 */
export declare function pad(str: any, max: any): string;
/**
 * return a masquerade string with its first and last {charNum} and three dots in between.
 * @param {String} str
 * @param {Number} charNum
 * @returns {String}
 */
export declare function mask(str: string, charNum?: number): string;
export declare function encodeScopedUri(packageName: any): string;
export declare function hasDiffOneKey(versions: any): boolean;
export declare function isVersionValid(packageMeta: any, packageVersion: any): boolean;
export declare function isRelatedToDeprecation(pkgInfo: Package): boolean;
export declare function validateURL(publicUrl: string | void): boolean;
export declare function isHost(url?: string, options?: {}): boolean;
export declare function getPublicUrl(url_prefix: string | undefined, req: any): string;
/**
 * Create base url for registry.
 * @return {String} base registry url
 */
export declare function combineBaseUrl(protocol: string, host: string, prefix?: string): string;
export declare function wrapPrefix(prefix: string | void): string;
export declare function hasLogin(config: Config): boolean;
