"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _express = require("express");
var _constants = require("../../../lib/constants");
var _search = _interopRequireDefault(require("../../../lib/search"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function addSearchWebApi(storage, auth) {
  const route = (0, _express.Router)(); /* eslint new-cap: 0 */
  // Search package
  route.get('/search/:anything', function (req, res, next) {
    const results = _search.default.query(req.params.anything);
    // FUTURE: figure out here the correct type
    const packages = [];
    const getPackageInfo = function (i) {
      storage.getPackage({
        name: results[i].ref,
        uplinksLook: false,
        callback: (err, entry) => {
          if (!err && entry) {
            auth.allow_access({
              packageName: entry.name
            }, req.remote_user, function (err, allowed) {
              if (err || !allowed) {
                return;
              }
              packages.push(entry.versions[entry[_constants.DIST_TAGS].latest]);
            });
          }
          if (i >= results.length - 1) {
            next(packages);
          } else {
            getPackageInfo(i + 1);
          }
        }
      });
    };
    if (results.length) {
      getPackageInfo(0);
    } else {
      next([]);
    }
  });
  return route;
}
var _default = addSearchWebApi;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhZGRTZWFyY2hXZWJBcGkiLCJzdG9yYWdlIiwiYXV0aCIsInJvdXRlIiwiUm91dGVyIiwiZ2V0IiwicmVxIiwicmVzIiwibmV4dCIsInJlc3VsdHMiLCJTZWFyY2giLCJxdWVyeSIsInBhcmFtcyIsImFueXRoaW5nIiwicGFja2FnZXMiLCJnZXRQYWNrYWdlSW5mbyIsImkiLCJnZXRQYWNrYWdlIiwibmFtZSIsInJlZiIsInVwbGlua3NMb29rIiwiY2FsbGJhY2siLCJlcnIiLCJlbnRyeSIsImFsbG93X2FjY2VzcyIsInBhY2thZ2VOYW1lIiwicmVtb3RlX3VzZXIiLCJhbGxvd2VkIiwicHVzaCIsInZlcnNpb25zIiwiRElTVF9UQUdTIiwibGF0ZXN0IiwibGVuZ3RoIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaS93ZWIvZW5kcG9pbnQvc2VhcmNoLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJvdXRlciB9IGZyb20gJ2V4cHJlc3MnO1xuXG5pbXBvcnQgeyBQYWNrYWdlIH0gZnJvbSAnQHZlcmRhY2Npby90eXBlcyc7XG5cbmltcG9ydCB7IERJU1RfVEFHUyB9IGZyb20gJy4uLy4uLy4uL2xpYi9jb25zdGFudHMnO1xuaW1wb3J0IFNlYXJjaCBmcm9tICcuLi8uLi8uLi9saWIvc2VhcmNoJztcbmltcG9ydCB7ICROZXh0RnVuY3Rpb25WZXIsICRSZXF1ZXN0RXh0ZW5kLCAkUmVzcG9uc2VFeHRlbmQsIElBdXRoLCBJU3RvcmFnZUhhbmRsZXIgfSBmcm9tICcuLi8uLi8uLi90eXBlcyc7XG5cbmZ1bmN0aW9uIGFkZFNlYXJjaFdlYkFwaShzdG9yYWdlOiBJU3RvcmFnZUhhbmRsZXIsIGF1dGg6IElBdXRoKTogUm91dGVyIHtcbiAgY29uc3Qgcm91dGUgPSBSb3V0ZXIoKTsgLyogZXNsaW50IG5ldy1jYXA6IDAgKi9cbiAgLy8gU2VhcmNoIHBhY2thZ2VcbiAgcm91dGUuZ2V0KCcvc2VhcmNoLzphbnl0aGluZycsIGZ1bmN0aW9uIChyZXE6ICRSZXF1ZXN0RXh0ZW5kLCByZXM6ICRSZXNwb25zZUV4dGVuZCwgbmV4dDogJE5leHRGdW5jdGlvblZlcik6IHZvaWQge1xuICAgIGNvbnN0IHJlc3VsdHM6IGFueSA9IFNlYXJjaC5xdWVyeShyZXEucGFyYW1zLmFueXRoaW5nKTtcbiAgICAvLyBGVVRVUkU6IGZpZ3VyZSBvdXQgaGVyZSB0aGUgY29ycmVjdCB0eXBlXG4gICAgY29uc3QgcGFja2FnZXM6IGFueVtdID0gW107XG5cbiAgICBjb25zdCBnZXRQYWNrYWdlSW5mbyA9IGZ1bmN0aW9uIChpKTogdm9pZCB7XG4gICAgICBzdG9yYWdlLmdldFBhY2thZ2Uoe1xuICAgICAgICBuYW1lOiByZXN1bHRzW2ldLnJlZixcbiAgICAgICAgdXBsaW5rc0xvb2s6IGZhbHNlLFxuICAgICAgICBjYWxsYmFjazogKGVyciwgZW50cnk6IFBhY2thZ2UpOiB2b2lkID0+IHtcbiAgICAgICAgICBpZiAoIWVyciAmJiBlbnRyeSkge1xuICAgICAgICAgICAgYXV0aC5hbGxvd19hY2Nlc3MoeyBwYWNrYWdlTmFtZTogZW50cnkubmFtZSB9LCByZXEucmVtb3RlX3VzZXIsIGZ1bmN0aW9uIChlcnIsIGFsbG93ZWQpOiB2b2lkIHtcbiAgICAgICAgICAgICAgaWYgKGVyciB8fCAhYWxsb3dlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHBhY2thZ2VzLnB1c2goZW50cnkudmVyc2lvbnNbZW50cnlbRElTVF9UQUdTXS5sYXRlc3RdKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChpID49IHJlc3VsdHMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgbmV4dChwYWNrYWdlcyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdldFBhY2thZ2VJbmZvKGkgKyAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgaWYgKHJlc3VsdHMubGVuZ3RoKSB7XG4gICAgICBnZXRQYWNrYWdlSW5mbygwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV4dChbXSk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcm91dGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFkZFNlYXJjaFdlYkFwaTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFJQTtBQUNBO0FBQXlDO0FBR3pDLFNBQVNBLGVBQWUsQ0FBQ0MsT0FBd0IsRUFBRUMsSUFBVyxFQUFVO0VBQ3RFLE1BQU1DLEtBQUssR0FBRyxJQUFBQyxlQUFNLEdBQUUsQ0FBQyxDQUFDO0VBQ3hCO0VBQ0FELEtBQUssQ0FBQ0UsR0FBRyxDQUFDLG1CQUFtQixFQUFFLFVBQVVDLEdBQW1CLEVBQUVDLEdBQW9CLEVBQUVDLElBQXNCLEVBQVE7SUFDaEgsTUFBTUMsT0FBWSxHQUFHQyxlQUFNLENBQUNDLEtBQUssQ0FBQ0wsR0FBRyxDQUFDTSxNQUFNLENBQUNDLFFBQVEsQ0FBQztJQUN0RDtJQUNBLE1BQU1DLFFBQWUsR0FBRyxFQUFFO0lBRTFCLE1BQU1DLGNBQWMsR0FBRyxVQUFVQyxDQUFDLEVBQVE7TUFDeENmLE9BQU8sQ0FBQ2dCLFVBQVUsQ0FBQztRQUNqQkMsSUFBSSxFQUFFVCxPQUFPLENBQUNPLENBQUMsQ0FBQyxDQUFDRyxHQUFHO1FBQ3BCQyxXQUFXLEVBQUUsS0FBSztRQUNsQkMsUUFBUSxFQUFFLENBQUNDLEdBQUcsRUFBRUMsS0FBYyxLQUFXO1VBQ3ZDLElBQUksQ0FBQ0QsR0FBRyxJQUFJQyxLQUFLLEVBQUU7WUFDakJyQixJQUFJLENBQUNzQixZQUFZLENBQUM7Y0FBRUMsV0FBVyxFQUFFRixLQUFLLENBQUNMO1lBQUssQ0FBQyxFQUFFWixHQUFHLENBQUNvQixXQUFXLEVBQUUsVUFBVUosR0FBRyxFQUFFSyxPQUFPLEVBQVE7Y0FDNUYsSUFBSUwsR0FBRyxJQUFJLENBQUNLLE9BQU8sRUFBRTtnQkFDbkI7Y0FDRjtjQUVBYixRQUFRLENBQUNjLElBQUksQ0FBQ0wsS0FBSyxDQUFDTSxRQUFRLENBQUNOLEtBQUssQ0FBQ08sb0JBQVMsQ0FBQyxDQUFDQyxNQUFNLENBQUMsQ0FBQztZQUN4RCxDQUFDLENBQUM7VUFDSjtVQUVBLElBQUlmLENBQUMsSUFBSVAsT0FBTyxDQUFDdUIsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUMzQnhCLElBQUksQ0FBQ00sUUFBUSxDQUFDO1VBQ2hCLENBQUMsTUFBTTtZQUNMQyxjQUFjLENBQUNDLENBQUMsR0FBRyxDQUFDLENBQUM7VUFDdkI7UUFDRjtNQUNGLENBQUMsQ0FBQztJQUNKLENBQUM7SUFFRCxJQUFJUCxPQUFPLENBQUN1QixNQUFNLEVBQUU7TUFDbEJqQixjQUFjLENBQUMsQ0FBQyxDQUFDO0lBQ25CLENBQUMsTUFBTTtNQUNMUCxJQUFJLENBQUMsRUFBRSxDQUFDO0lBQ1Y7RUFDRixDQUFDLENBQUM7RUFFRixPQUFPTCxLQUFLO0FBQ2Q7QUFBQyxlQUVjSCxlQUFlO0FBQUEifQ==