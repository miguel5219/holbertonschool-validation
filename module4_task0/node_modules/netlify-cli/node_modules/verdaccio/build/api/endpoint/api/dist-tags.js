"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
var _lodash = _interopRequireDefault(require("lodash"));
var _mime = _interopRequireDefault(require("mime"));
var _constants = require("../../../lib/constants");
var _middleware = require("../../middleware");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _default(route, auth, storage) {
  const can = (0, _middleware.allow)(auth);
  const tag_package_version = function (req, res, next) {
    if (_lodash.default.isString(req.body) === false) {
      return next('route');
    }
    const tags = {};
    tags[req.params.tag] = req.body;
    storage.mergeTags(req.params.package, tags, function (err) {
      if (err) {
        return next(err);
      }
      res.status(_constants.HTTP_STATUS.CREATED);
      return next({
        ok: _constants.API_MESSAGE.TAG_ADDED
      });
    });
  };

  // tagging a package
  route.put('/:package/:tag', can('publish'), (0, _middleware.media)(_mime.default.getType('json')), tag_package_version);
  route.post('/-/package/:package/dist-tags/:tag', can('publish'), (0, _middleware.media)(_mime.default.getType('json')), tag_package_version);
  route.put('/-/package/:package/dist-tags/:tag', can('publish'), (0, _middleware.media)(_mime.default.getType('json')), tag_package_version);
  route.delete('/-/package/:package/dist-tags/:tag', can('publish'), function (req, res, next) {
    const tags = {};
    tags[req.params.tag] = null;
    storage.mergeTags(req.params.package, tags, function (err) {
      if (err) {
        return next(err);
      }
      res.status(_constants.HTTP_STATUS.CREATED);
      return next({
        ok: _constants.API_MESSAGE.TAG_REMOVED
      });
    });
  });
  route.get('/-/package/:package/dist-tags', can('access'), function (req, res, next) {
    storage.getPackage({
      name: req.params.package,
      uplinksLook: true,
      req,
      callback: function (err, info) {
        if (err) {
          return next(err);
        }
        next(info[_constants.DIST_TAGS]);
      }
    });
  });
  route.post('/-/package/:package/dist-tags', can('publish'), function (req, res, next) {
    storage.mergeTags(req.params.package, req.body, function (err) {
      if (err) {
        return next(err);
      }
      res.status(_constants.HTTP_STATUS.CREATED);
      return next({
        ok: _constants.API_MESSAGE.TAG_UPDATED
      });
    });
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyb3V0ZSIsImF1dGgiLCJzdG9yYWdlIiwiY2FuIiwiYWxsb3ciLCJ0YWdfcGFja2FnZV92ZXJzaW9uIiwicmVxIiwicmVzIiwibmV4dCIsIl8iLCJpc1N0cmluZyIsImJvZHkiLCJ0YWdzIiwicGFyYW1zIiwidGFnIiwibWVyZ2VUYWdzIiwicGFja2FnZSIsImVyciIsInN0YXR1cyIsIkhUVFBfU1RBVFVTIiwiQ1JFQVRFRCIsIm9rIiwiQVBJX01FU1NBR0UiLCJUQUdfQURERUQiLCJwdXQiLCJtZWRpYSIsIm1pbWUiLCJnZXRUeXBlIiwicG9zdCIsImRlbGV0ZSIsIlRBR19SRU1PVkVEIiwiZ2V0IiwiZ2V0UGFja2FnZSIsIm5hbWUiLCJ1cGxpbmtzTG9vayIsImNhbGxiYWNrIiwiaW5mbyIsIkRJU1RfVEFHUyIsIlRBR19VUERBVEVEIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaS9lbmRwb2ludC9hcGkvZGlzdC10YWdzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJvdXRlciB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBtaW1lIGZyb20gJ21pbWUnO1xuXG5pbXBvcnQgeyBWZXJkYWNjaW9FcnJvciB9IGZyb20gJ0B2ZXJkYWNjaW8vY29tbW9ucy1hcGknO1xuaW1wb3J0IHsgUGFja2FnZSB9IGZyb20gJ0B2ZXJkYWNjaW8vdHlwZXMnO1xuXG5pbXBvcnQgeyBBUElfTUVTU0FHRSwgRElTVF9UQUdTLCBIVFRQX1NUQVRVUyB9IGZyb20gJy4uLy4uLy4uL2xpYi9jb25zdGFudHMnO1xuaW1wb3J0IHsgJE5leHRGdW5jdGlvblZlciwgJFJlcXVlc3RFeHRlbmQsICRSZXNwb25zZUV4dGVuZCwgSUF1dGgsIElTdG9yYWdlSGFuZGxlciB9IGZyb20gJy4uLy4uLy4uL3R5cGVzJztcbmltcG9ydCB7IGFsbG93LCBtZWRpYSB9IGZyb20gJy4uLy4uL21pZGRsZXdhcmUnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAocm91dGU6IFJvdXRlciwgYXV0aDogSUF1dGgsIHN0b3JhZ2U6IElTdG9yYWdlSGFuZGxlcik6IHZvaWQge1xuICBjb25zdCBjYW4gPSBhbGxvdyhhdXRoKTtcbiAgY29uc3QgdGFnX3BhY2thZ2VfdmVyc2lvbiA9IGZ1bmN0aW9uIChyZXE6ICRSZXF1ZXN0RXh0ZW5kLCByZXM6ICRSZXNwb25zZUV4dGVuZCwgbmV4dDogJE5leHRGdW5jdGlvblZlcik6ICROZXh0RnVuY3Rpb25WZXIge1xuICAgIGlmIChfLmlzU3RyaW5nKHJlcS5ib2R5KSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiBuZXh0KCdyb3V0ZScpO1xuICAgIH1cblxuICAgIGNvbnN0IHRhZ3MgPSB7fTtcbiAgICB0YWdzW3JlcS5wYXJhbXMudGFnXSA9IHJlcS5ib2R5O1xuICAgIHN0b3JhZ2UubWVyZ2VUYWdzKHJlcS5wYXJhbXMucGFja2FnZSwgdGFncywgZnVuY3Rpb24gKGVycjogRXJyb3IpOiAkTmV4dEZ1bmN0aW9uVmVyIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIG5leHQoZXJyKTtcbiAgICAgIH1cbiAgICAgIHJlcy5zdGF0dXMoSFRUUF9TVEFUVVMuQ1JFQVRFRCk7XG4gICAgICByZXR1cm4gbmV4dCh7IG9rOiBBUElfTUVTU0FHRS5UQUdfQURERUQgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgLy8gdGFnZ2luZyBhIHBhY2thZ2VcbiAgcm91dGUucHV0KCcvOnBhY2thZ2UvOnRhZycsIGNhbigncHVibGlzaCcpLCBtZWRpYShtaW1lLmdldFR5cGUoJ2pzb24nKSksIHRhZ19wYWNrYWdlX3ZlcnNpb24pO1xuXG4gIHJvdXRlLnBvc3QoJy8tL3BhY2thZ2UvOnBhY2thZ2UvZGlzdC10YWdzLzp0YWcnLCBjYW4oJ3B1Ymxpc2gnKSwgbWVkaWEobWltZS5nZXRUeXBlKCdqc29uJykpLCB0YWdfcGFja2FnZV92ZXJzaW9uKTtcblxuICByb3V0ZS5wdXQoJy8tL3BhY2thZ2UvOnBhY2thZ2UvZGlzdC10YWdzLzp0YWcnLCBjYW4oJ3B1Ymxpc2gnKSwgbWVkaWEobWltZS5nZXRUeXBlKCdqc29uJykpLCB0YWdfcGFja2FnZV92ZXJzaW9uKTtcblxuICByb3V0ZS5kZWxldGUoJy8tL3BhY2thZ2UvOnBhY2thZ2UvZGlzdC10YWdzLzp0YWcnLCBjYW4oJ3B1Ymxpc2gnKSwgZnVuY3Rpb24gKHJlcTogJFJlcXVlc3RFeHRlbmQsIHJlczogJFJlc3BvbnNlRXh0ZW5kLCBuZXh0OiAkTmV4dEZ1bmN0aW9uVmVyKTogdm9pZCB7XG4gICAgY29uc3QgdGFncyA9IHt9O1xuICAgIHRhZ3NbcmVxLnBhcmFtcy50YWddID0gbnVsbDtcbiAgICBzdG9yYWdlLm1lcmdlVGFncyhyZXEucGFyYW1zLnBhY2thZ2UsIHRhZ3MsIGZ1bmN0aW9uIChlcnI6IFZlcmRhY2Npb0Vycm9yKTogJE5leHRGdW5jdGlvblZlciB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHJldHVybiBuZXh0KGVycik7XG4gICAgICB9XG4gICAgICByZXMuc3RhdHVzKEhUVFBfU1RBVFVTLkNSRUFURUQpO1xuICAgICAgcmV0dXJuIG5leHQoe1xuICAgICAgICBvazogQVBJX01FU1NBR0UuVEFHX1JFTU9WRUQsXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgcm91dGUuZ2V0KCcvLS9wYWNrYWdlLzpwYWNrYWdlL2Rpc3QtdGFncycsIGNhbignYWNjZXNzJyksIGZ1bmN0aW9uIChyZXE6ICRSZXF1ZXN0RXh0ZW5kLCByZXM6ICRSZXNwb25zZUV4dGVuZCwgbmV4dDogJE5leHRGdW5jdGlvblZlcik6IHZvaWQge1xuICAgIHN0b3JhZ2UuZ2V0UGFja2FnZSh7XG4gICAgICBuYW1lOiByZXEucGFyYW1zLnBhY2thZ2UsXG4gICAgICB1cGxpbmtzTG9vazogdHJ1ZSxcbiAgICAgIHJlcSxcbiAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbiAoZXJyOiBWZXJkYWNjaW9FcnJvciwgaW5mbzogUGFja2FnZSk6ICROZXh0RnVuY3Rpb25WZXIge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgcmV0dXJuIG5leHQoZXJyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5leHQoaW5mb1tESVNUX1RBR1NdKTtcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0pO1xuXG4gIHJvdXRlLnBvc3QoJy8tL3BhY2thZ2UvOnBhY2thZ2UvZGlzdC10YWdzJywgY2FuKCdwdWJsaXNoJyksIGZ1bmN0aW9uIChyZXE6ICRSZXF1ZXN0RXh0ZW5kLCByZXM6ICRSZXNwb25zZUV4dGVuZCwgbmV4dDogJE5leHRGdW5jdGlvblZlcik6IHZvaWQge1xuICAgIHN0b3JhZ2UubWVyZ2VUYWdzKHJlcS5wYXJhbXMucGFja2FnZSwgcmVxLmJvZHksIGZ1bmN0aW9uIChlcnI6IFZlcmRhY2Npb0Vycm9yKTogJE5leHRGdW5jdGlvblZlciB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHJldHVybiBuZXh0KGVycik7XG4gICAgICB9XG4gICAgICByZXMuc3RhdHVzKEhUVFBfU1RBVFVTLkNSRUFURUQpO1xuICAgICAgcmV0dXJuIG5leHQoe1xuICAgICAgICBvazogQVBJX01FU1NBR0UuVEFHX1VQREFURUQsXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBO0FBQ0E7QUFLQTtBQUVBO0FBQWdEO0FBRWpDLGtCQUFVQSxLQUFhLEVBQUVDLElBQVcsRUFBRUMsT0FBd0IsRUFBUTtFQUNuRixNQUFNQyxHQUFHLEdBQUcsSUFBQUMsaUJBQUssRUFBQ0gsSUFBSSxDQUFDO0VBQ3ZCLE1BQU1JLG1CQUFtQixHQUFHLFVBQVVDLEdBQW1CLEVBQUVDLEdBQW9CLEVBQUVDLElBQXNCLEVBQW9CO0lBQ3pILElBQUlDLGVBQUMsQ0FBQ0MsUUFBUSxDQUFDSixHQUFHLENBQUNLLElBQUksQ0FBQyxLQUFLLEtBQUssRUFBRTtNQUNsQyxPQUFPSCxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCO0lBRUEsTUFB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