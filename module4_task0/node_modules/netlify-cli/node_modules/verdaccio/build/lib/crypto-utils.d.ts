/// <reference types="node" />
import { Hash } from 'crypto';
import { JWTSignOptions, RemoteUser } from '@verdaccio/types';
export declare const defaultAlgorithm = "aes192";
export declare const defaultTarballHashAlgorithm = "sha1";
export declare function aesEncrypt(buf: Buffer, secret: string): Buffer;
export declare function aesDecrypt(buf: Buffer, secret: string): Buffer;
export declare function createTarballHash(): Hash;
/**
 * Express doesn't do ETAGS with requests <= 1024b
 * we use md5 here, it works well on 1k+ bytes, but sucks with fewer data
 * could improve performance using crc32 after benchmarks.
 * @param {Object} data
 * @return {String}
 */
export declare function stringToMD5(data: Buffer | string): string;
export declare function generateRandomHexString(length?: number): string;
export declare function signPayload(payload: RemoteUser, secretOrPrivateKey: string, options: JWTSignOptions): Promise<string>;
export declare function verifyPayload(token: string, secretOrPrivateKey: string): RemoteUser;
