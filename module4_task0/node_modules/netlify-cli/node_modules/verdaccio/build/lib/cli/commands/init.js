"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InitCommand = exports.DEFAULT_PROCESS_NAME = void 0;
var _clipanion = require("clipanion");
var _path = _interopRequireDefault(require("path"));
var _bootstrap = require("../../bootstrap");
var _configPath = _interopRequireDefault(require("../../config-path"));
var _utils = require("../../utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
require('pkginfo')(module);
const pkgVersion = module.exports.version;
const pkgName = module.exports.name;
const DEFAULT_PROCESS_NAME = 'verdaccio';
exports.DEFAULT_PROCESS_NAME = DEFAULT_PROCESS_NAME;
const logger = require('../../logger');
class InitCommand extends _clipanion.Command {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "listen", _clipanion.Option.String('-l,--listen', {
      description: 'host:port number to listen on (default: localhost:4873)'
    }));
    _defineProperty(this, "config", _clipanion.Option.String('-c,--config', {
      description: 'use this configuration file (default: ./config.yaml)'
    }));
  }
  async execute() {
    let configPathLocation;
    try {
      configPathLocation = (0, _configPath.default)(this.config);
      const verdaccioConfiguration = (0, _utils.parseConfigFile)(configPathLocation);
      if (!verdaccioConfiguration.self_path) {
        verdaccioConfiguration.self_path = _path.default.resolve(configPathLocation);
      }
      if (!verdaccioConfiguration.https) {
        verdaccioConfiguration.https = {
          enable: false
        };
      }
      logger.logger.warn({
        file: configPathLocation
      }, 'config file  - @{file}');
      process.title = verdaccioConfiguration.web && verdaccioConfiguration.web.title || 'verdaccio';
      (0, _bootstrap.startVerdaccio)(verdaccioConfiguration, this.listen, configPathLocation, pkgVersion, pkgName, _bootstrap.listenDefaultCallback);
    } catch (err) {
      logger.logger.fatal({
        file: configPathLocation,
        err: err
      }, 'cannot open config file @{file}: @{!err.message}');
      process.exit(1);
    }
  }
}
exports.InitCommand = InitCommand;
_defineProperty(InitCommand, "paths", [_clipanion.Command.Default]);
_defineProperty(InitCommand, "usage", _clipanion.Command.Usage({
  description: `launch the server`,
  details: `
      This start the registry in the default port.

      When used without arguments, it:

      - bootstrap the server at the port  \`4873\`

      The optional arguments are:

      - \`--listen\` to switch the default server port,
      - \`--config\` to define a different configuration path location,

    `,
  examples: [[`Runs the server with the default configuration`, `verdaccio`], [`Runs the server in the port 5000`, `verdaccio --listen 5000`], [`Runs the server by using a different absolute location of the configuration file`, `verdaccio --config /home/user/verdaccio/config.yaml`]]
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1aXJlIiwibW9kdWxlIiwicGtnVmVyc2lvbiIsImV4cG9ydHMiLCJ2ZXJzaW9uIiwicGtnTmFtZSIsIm5hbWUiLCJERUZBVUxUX1BST0NFU1NfTkFNRSIsImxvZ2dlciIsIkluaXRDb21tYW5kIiwiQ29tbWFuZCIsIk9wdGlvbiIsIlN0cmluZyIsImRlc2NyaXB0aW9uIiwiZXhlY3V0ZSIsImNvbmZpZ1BhdGhMb2NhdGlvbiIsImZpbmRDb25maWdGaWxlIiwiY29uZmlnIiwidmVyZGFjY2lvQ29uZmlndXJhdGlvbiIsInBhcnNlQ29uZmlnRmlsZSIsInNlbGZfcGF0aCIsInBhdGgiLCJyZXNvbHZlIiwiaHR0cHMiLCJlbmFibGUiLCJ3YXJuIiwiZmlsZSIsInByb2Nlc3MiLCJ0aXRsZSIsIndlYiIsInN0YXJ0VmVyZGFjY2lvIiwibGlzdGVuIiwibGlzdGVuRGVmYXVsdENhbGxiYWNrIiwiZXJyIiwiZmF0YWwiLCJleGl0IiwiRGVmYXVsdCIsIlVzYWdlIiwiZGV0YWlscyIsImV4YW1wbGVzIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi9jbGkvY29tbWFuZHMvaW5pdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tYW5kLCBPcHRpb24gfSBmcm9tICdjbGlwYW5pb24nO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbmltcG9ydCB7IGxpc3RlbkRlZmF1bHRDYWxsYmFjaywgc3RhcnRWZXJkYWNjaW8gfSBmcm9tICcuLi8uLi9ib290c3RyYXAnO1xuaW1wb3J0IGZpbmRDb25maWdGaWxlIGZyb20gJy4uLy4uL2NvbmZpZy1wYXRoJztcbmltcG9ydCB7IHBhcnNlQ29uZmlnRmlsZSB9IGZyb20gJy4uLy4uL3V0aWxzJztcblxucmVxdWlyZSgncGtnaW5mbycpKG1vZHVsZSk7XG5jb25zdCBwa2dWZXJzaW9uID0gbW9kdWxlLmV4cG9ydHMudmVyc2lvbjtcbmNvbnN0IHBrZ05hbWUgPSBtb2R1bGUuZXhwb3J0cy5uYW1lO1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9QUk9DRVNTX05BTUU6IHN0cmluZyA9ICd2ZXJkYWNjaW8nO1xuY29uc3QgbG9nZ2VyID0gcmVxdWlyZSgnLi4vLi4vbG9nZ2VyJyk7XG5cbmV4cG9ydCBjbGFzcyBJbml0Q29tbWFuZCBleHRlbmRzIENvbW1hbmQge1xuICBzdGF0aWMgcGF0aHMgPSBbQ29tbWFuZC5EZWZhdWx0XTtcblxuICBsaXN0ZW4gPSBPcHRpb24uU3RyaW5nKCctbCwtLWxpc3RlbicsIHtcbiAgICBkZXNjcmlwdGlvbjogJ2hvc3Q6cG9ydCBudW1iZXIgdG8gbGlzdGVuIG9uIChkZWZhdWx0OiBsb2NhbGhvc3Q6NDg3MyknLFxuICB9KTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgc3RhdGljIHVzYWdlID0gQ29tbWFuZC5Vc2FnZSh7XG4gICAgZGVzY3JpcHRpb246IGBsYXVuY2ggdGhlIHNlcnZlcmAsXG4gICAgZGV0YWlsczogYFxuICAgICAgVGhpcyBzdGFydCB0aGUgcmVnaXN0cnkgaW4gdGhlIGRlZmF1bHQgcG9ydC5cblxuICAgICAgV2hlbiB1c2VkIHdpdGhvdXQgYXJndW1lbnRzLCBpdDpcblxuICAgICAgLSBib290c3RyYXAgdGhlIHNlcnZlciBhdCB0aGUgcG9ydCAgXFxgNDg3M1xcYFxuXG4gICAgICBUaGUgb3B0aW9uYWwgYXJndW1lbnRzIGFyZTpcblxuICAgICAgLSBcXGAtLWxpc3RlblxcYCB0byBzd2l0Y2ggdGhlIGRlZmF1bHQgc2VydmVyIHBvcnQsXG4gICAgICAtIFxcYC0tY29uZmlnXFxgIHRvIGRlZmluZSBhIGRpZmZlcmVudCBjb25maWd1cmF0aW9uIHBhdGggbG9jYXRpb24sXG5cbiAgICBgLFxuICAgIGV4YW1wbGVzOiBbXG4gICAgICBbYFJ1bnMgdGhlIHNlcnZlciB3aXRoIHRoZSBkZWZhdWx0IGNvbmZpZ3VyYXRpb25gLCBgdmVyZGFjY2lvYF0sXG4gICAgICBbYFJ1bnMgdGhlIHNlcnZlciBpbiB0aGUgcG9ydCA1MDAwYCwgYHZlcmRhY2NpbyAtLWxpc3RlbiA1MDAwYF0sXG4gICAgICBbYFJ1bnMgdGhlIHNlcnZlciBieSB1c2luZyBhIGRpZmZlcmVudCBhYnNvbHV0ZSBsb2NhdGlvbiBvZiB0aGUgY29uZmlndXJhdGlvbiBmaWxlYCwgYHZlcmRhY2NpbyAtLWNvbmZpZyAvaG9tZS91c2VyL3ZlcmRhY2Npby9jb25maWcueWFtbGBdLFxuICAgIF0sXG4gIH0pO1xuXG4gIGNvbmZpZyA9IE9wdGlvbi5TdHJpbmcoJy1jLC0tY29uZmlnJywge1xuICAgIGRlc2NyaXB0aW9uOiAndXNlIHRoaXMgY29uZmlndXJhdGlvbiBmaWxlIChkZWZhdWx0OiAuL2NvbmZpZy55YW1sKScsXG4gIH0pO1xuXG4gIGFzeW5jIGV4ZWN1dGUoKSB7XG4gICAgbGV0IGNvbmZpZ1BhdGhMb2NhdGlvbjtcbiAgICB0cnkge1xuICAgICAgY29uZmlnUGF0aExvY2F0aW9uID0gZmluZENvbmZpZ0ZpbGUodGhpcy5jb25maWcgYXMgc3RyaW5nKTtcbiAgICAgIGNvbnN0IHZlcmRhY2Npb0NvbmZpZ3VyYXRpb24gPSBwYXJzZUNvbmZpZ0ZpbGUoY29uZmlnUGF0aExvY2F0aW9uKTtcbiAgICAgIGlmICghdmVyZGFjY2lvQ29uZmlndXJhdGlvbi5zZWxmX3BhdGgpIHtcbiAgICAgICAgdmVyZGFjY2lvQ29uZmlndXJhdGlvbi5zZWxmX3BhdGggPSBwYXRoLnJlc29sdmUoY29uZmlnUGF0aExvY2F0aW9uKTtcbiAgICAgIH1cbiAgICAgIGlmICghdmVyZGFjY2lvQ29uZmlndXJhdGlvbi5odHRwcykge1xuICAgICAgICB2ZXJkYWNjaW9Db25maWd1cmF0aW9uLmh0dHBzID0geyBlbmFibGU6IGZhbHNlIH07XG4gICAgICB9XG5cbiAgICAgIGxvZ2dlci5sb2dnZXIud2Fybih7IGZpbGU6IGNvbmZpZ1BhdGhMb2NhdGlvbiB9LCAnY29uZmlnIGZpbGUgIC0gQHtmaWxlfScpO1xuICAgICAgcHJvY2Vzcy50aXRsZSA9ICh2ZXJkYWNjaW9Db25maWd1cmF0aW9uLndlYiAmJiB2ZXJkYWNjaW9Db25maWd1cmF0aW9uLndlYi50aXRsZSkgfHwgJ3ZlcmRhY2Npbyc7XG5cbiAgICAgIHN0YXJ0VmVyZGFjY2lvKHZlcmRhY2Npb0NvbmZpZ3VyYXRpb24sIHRoaXMubGlzdGVuIGFzIHN0cmluZywgY29uZmlnUGF0aExvY2F0aW9uLCBwa2dWZXJzaW9uLCBwa2dOYW1lLCBsaXN0ZW5EZWZhdWx0Q2FsbGJhY2spO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgbG9nZ2VyLmxvZ2dlci5mYXRhbCh7IGZpbGU6IGNvbmZpZ1BhdGhMb2NhdGlvbiwgZXJyOiBlcnIgfSwgJ2Nhbm5vdCBvcGVuIGNvbmZpZyBmaWxlIEB7ZmlsZX06IEB7IWVyci5tZXNzYWdlfScpO1xuICAgICAgcHJvY2Vzcy5leGl0KDEpO1xuICAgIH1cbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQThDO0FBQUE7QUFBQTtBQUFBO0FBRTlDQSxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUNDLE1BQU0sQ0FBQztBQUMxQixNQUFNQyxVQUFVLEdBQUdELE1BQU0sQ0FBQ0UsT0FBTyxDQUFDQyxPQUFPO0FBQ3pDLE1BQU1DLE9BQU8sR0FBR0osTUFBTSxDQUFDRSxPQUFPLENBQUNHLElBQUk7QUFFNUIsTUFBTUMsb0JBQTRCLEdBQUcsV0FBVztBQUFDO0FBQ3hELE1BQU1DLE1BQU0sR0FBR1IsT0FBTyxDQUFDLGNBQWMsQ0FBQztBQUUvQixNQUFNUyxXQUFXLFNBQVNDLGtCQUFPLENBQUM7RUFBQTtJQUFBO0lBQUEsZ0NBRzlCQyxpQkFBTSxDQUFDQyxNQUFNLENBQUMsYUFBYSxFQUFFO01BQ3BDQyxXQUFXLEVBQUU7SUFDZixDQUFDLENBQUM7SUFBQSxnQ0F5Qk9GLGlCQUFNLENBQUNDLE1BQU0sQ0FBQyxhQUFhLEVBQUU7TUFDcENDLFdBQVcsRUFBRTtJQUNmLENBQUMsQ0FBQztFQUFBO0VBRUYsTUFBTUMsT0FBTyxHQUFHO0lBQ2QsSUFBSUMsa0JBQWtCO0lBQ3RCLElBQUk7TUFDRkEsa0JBQWtCLEdBQUcsSUFBQUMsbUJBQWMsRUFBQyxJQUFJLENBQUNDLE1BQU0sQ0FBVztNQUMxRCxNQUFNQyxzQkFBc0IsR0FBRyxJQUFBQyxzQkFBZSxFQUFDSixrQkFBa0IsQ0FBQztNQUNsRSxJQUFJLENBQUNHLHNCQUFzQixDQUFDRSxTQUFTLEVBQUU7UUFDckNGLHNCQUFzQixDQUFDRSxTQUFTLEdBQUdDLGFBQUksQ0FBQ0MsT0FBTyxDQUFDUCxrQkFBa0IsQ0FBQztNQUNyRTtNQUNBLElBQUksQ0FBQ0csc0JBQXNCLENBQUNLLEtBQUssRUFBRTtRQUNqQ0wsc0JBQXNCLENBQUNLLEtBQUssR0FBRztVQUFFQyxNQUFNLEVBQUU7UUFBTSxDQUFDO01BQ2xEO01BRUFoQixNQUFNLENBQUNBLE1BQU0sQ0FBQ2lCLElBQUksQ0FBQztRQUFFQyxJQUFJLEVBQUVYO01BQW1CLENBQUMsRUFBRSx3QkFBd0IsQ0FBQztNQUMxRVksT0FBTyxDQUFDQyxLQUFLLEdBQUlWLHNCQUFzQixDQUFDVyxHQUFHLElBQUlYLHNCQUFzQixDQUFDVyxHQUFHLENBQUNELEtBQUssSUFBSyxXQUFXO01BRS9GLElBQUFFLHlCQUFjLEVBQUNaLHNCQUFzQixFQUFFLElBQUksQ0FBQ2EsTUFBTSxFQUFZaEIsa0JBQWtCLEVBQUViLFVBQVUsRUFBRUcsT0FBTyxFQUFFMkIsZ0NBQXFCLENBQUM7SUFDL0gsQ0FBQyxDQUFDLE9BQU9DLEdBQUcsRUFBRTtNQUNaekIsTUFBTSxDQUFDQSxNQUFNLENBQUMwQixLQUFLLENBQUM7UUFBRVIsSUFBSSxFQUFFWCxrQkFBa0I7UUFBRWtCLEdBQUcsRUFBRUE7TUFBSSxDQUFDLEVBQUUsa0RBQWtELENBQUM7TUFDL0dOLE9BQU8sQ0FBQ1EsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNqQjtFQUNGO0FBQ0Y7QUFBQztBQUFBLGdCQXZEWTFCLFdBQVcsV0FDUCxDQUFDQyxrQkFBTyxDQUFDMEIsT0FBTyxDQUFDO0FBQUEsZ0JBRHJCM0IsV0FBVyxXQVFQQyxrQkFBTyxDQUFDMkIsS0FBSyxDQUFDO0VBQzNCeEIsV0FBVyxFQUFHLG1CQUFrQjtFQUNoQ3lCLE9BQU8sRUFBRztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0VBQ0RDLFFBQVEsRUFBRSxDQUNSLENBQUUsZ0RBQStDLEVBQUcsV0FBVSxDQUFDLEVBQy9ELENBQUUsa0NBQWlDLEVBQUcseUJBQXdCLENBQUMsRUFDL0QsQ0FBRSxrRkFBaUYsRUFBRyxxREFBb0QsQ0FBQztBQUUvSSxDQUFDLENBQUMifQ==